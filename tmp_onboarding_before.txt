import React, { useState } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { Label } from './ui/label';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from './ui/dialog';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';
import { Building2, MapPin, Phone, Sparkles } from 'lucide-react';

interface OnboardingModalProps {
  isOpen: boolean;
  onClose: () => void;
}

export const OnboardingModal: React.FC<OnboardingModalProps> = ({ isOpen, onClose }) => {
  const { createOrganization, user } = useAuth();
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState({
    businessName: '',
    salonName: '',
    salonAddress: '',
    salonPhone: ''
  });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData.businessName.trim() || !formData.salonName.trim()) {
      return;
    }

    try {
      setLoading(true);
      await createOrganization({
        name: formData.businessName.trim(),
        salonName: formData.salonName.trim(),
        salonAddress: formData.salonAddress.trim() || undefined,
        salonPhone: formData.salonPhone.trim() || undefined
      });
      onClose();
    } catch (error) {
      console.error('Error creando organización:', error);
      // TODO: Mostrar error al usuario
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="w-[92vw] sm:max-w-[640px] max-h-[85vh] overflow-y-auto rounded-2xl p-5 border-0 shadow-xl">        <div className="relative overflow-hidden rounded-2xl">          <div className="absolute inset-0 bg-gradient-to-br from-primary/10 via-transparent to-primary/5" />          <div className="absolute -top-8 -right-10 h-28 w-28 rounded-full bg-primary/15 blur-2xl" />          <div className="absolute -bottom-10 -left-10 h-24 w-24 rounded-full bg-primary/10 blur-2xl" />          <div className="p-7 sm:p-8 relative">
        <DialogHeader className="text-center">
          <Sparkles className="h-7 w-7 text-primary mx-auto mb-2" />            <DialogTitle className="text-xl sm:text-2xl">

            ¡Bienvenido a Coreboard!
          </DialogTitle>
          <DialogDescription className="text-sm sm:text-base">
            Vamos a configurar tu primera peluquería. Esto solo tomará unos minutos.
          </DialogDescription>
        </DialogHeader>            <div className="h-px bg-border/70 my-5" />

        <form onSubmit={handleSubmit} className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-lg">
                <Building2 className="h-5 w-5 text-primary" />
                Información del Negocio
              </CardTitle>
              <CardDescription>
                Datos básicos de tu empresa o negocio
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="businessName">Nombre del negocio *</Label>
                <Input
                  id="businessName"
                  placeholder="Ej: Peluquería Martínez"
                  value={formData.businessName}
                  onChange={(e) => handleInputChange('businessName', e.target.value)}
                  required
                />
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-lg">
                <MapPin className="h-5 w-5 text-primary" />
                Primer Local
              </CardTitle>
              <CardDescription>
                Información de tu primera sucursal o local
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="salonName">Nombre del local *</Label>
                <Input
                  id="salonName"
                  placeholder="Ej: Sucursal Centro"
                  value={formData.salonName}
                  onChange={(e) => handleInputChange('salonName', e.target.value)}
                  required
                />
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="salonAddress">Dirección</Label>
                <Input
                  id="salonAddress"
                  placeholder="Ej: Av. Principal 123, Ciudad"
                  value={formData.salonAddress}
                  onChange={(e) => handleInputChange('salonAddress', e.target.value)}
                />
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="salonPhone">Teléfono</Label>
                <Input
                  id="salonPhone"
                  placeholder="Ej: +54 11 1234-5678"
                  value={formData.salonPhone}
                  onChange={(e) => handleInputChange('salonPhone', e.target.value)}
                />
              </div>
            </CardContent>
          </Card>

          <div className="flex justify-end gap-3 pt-4">
            <Button
              type="button"
              variant="outline"
              onClick={onClose}
              disabled={loading}
            >
              Cancelar
            </Button>
            <Button
              type="submit"
              disabled={loading || !formData.businessName.trim() || !formData.salonName.trim()}
            >
              {loading ? 'Creando...' : 'Crear mi peluquería'}
            </Button>
          </div>
        </form>          </div>        </div>
      </DialogContent>
    </Dialog>
  );
};









